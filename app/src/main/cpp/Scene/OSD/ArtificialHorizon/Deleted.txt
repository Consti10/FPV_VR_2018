// Deleted stuff

static ColoredMeshData create3DModelData(float hw,float sixtW);
ColoredMeshData AHorizon::create3DModelData(float hW, float sixtW) {
    //Copter as colored geometry data
    std::vector<ColoredVertex> vertices= {
            ColoredVertex{0.0f,0.0f,0.0f-sixtW,TrueColor2::RED}, //
            ColoredVertex{0.0f+sixtW,0.0f,0.0f+sixtW,TrueColor2::BLUE}, //bottom right
            ColoredVertex{0.0f-sixtW,0.0f,0.0f+sixtW,TrueColor2::YELLOW}, // bottom left
            //1
            ColoredVertex{0.0f,0.0f,0.0f,TrueColor2::RED},
            ColoredVertex{0.0f+hW,0.0f,0.0f-hW, TrueColor2::RED},
            ColoredVertex{0.0f+hW-(hW/4.0f),0.0f,0.0f-hW, TrueColor2::RED},
            //2
            ColoredVertex{0.0f,0.0f,0.0f, TrueColor2::BLUE},
            ColoredVertex{0.0f+hW,0.0f,0.0f+hW, TrueColor2::BLUE},
            ColoredVertex{0.0f+hW-(hW/4.0f),0.0f,0.0f+hW, TrueColor2::BLUE},
            //3
            ColoredVertex{0.0f,0.0f,0.0f, TrueColor2::YELLOW},
            ColoredVertex{0.0f-hW,0.0f,0.0f+hW, TrueColor2::YELLOW},
            ColoredVertex{0.0f-hW+(hW/4.0f),0.0f,0.0f+hW, TrueColor2::YELLOW},
            //4
            ColoredVertex{0.0f,0.0f,0.0f, TrueColor2::RED},
            ColoredVertex{0.0f-hW,0.0f,0.0f-hW, TrueColor2::RED},
            ColoredVertex{0.0f-hW+(hW/4.0f),0.0f,0.0f-hW,TrueColor2::RED}
    };
    return ColoredMeshData(vertices,GL_TRIANGLES);
}

ColoredGLMeshBuffer mGLBuff3DModel;
glm::mat4 mModelM3DModel;
//create the 3D model
{
    float hW=mWidth/2.0f;
    float sixtW=mWidth/6.0f;
    mGLBuff3DModel.setData(create3DModelData(hW,sixtW));
    //GLBufferHelper::uploadGLBufferStatic(mGLBuff3DModel, modelData.data(),
    //                                     modelData.size() * sizeof(GLProgramVC::Vertex));
}
{
    //for the 3d Model:
    glm::mat4 rotateM=glm::mat4(1.0f);
    rotateM=glm::rotate(rotateM,glm::radians(pitchDegree), glm::vec3(1.0f, 0.0f, 0.0f));
    rotateM=glm::rotate(rotateM,glm::radians(rollDegree), glm::vec3(0.0f, 0.0f, 1.0f));
    mModelM3DModel=rotateM;
}
//Render the 3D Quadcopter representation
if(mOptions.mode==MODE_3D_QUADCOPTER
   || mOptions.mode==MODE_BOTH_TOGETHER){
    mGLPrograms.vc.drawX(ViewM*mModelM3DModel,ProjM,mGLBuff3DModel);
}

GLBuffer<GLProgramLine::Vertex> mGLBuffLadders;
//Render the lines
    /*if(mOptions.mode==MODE_2D_LADDERS
       || mOptions.mode==MODE_BOTH_TOGETHER){
        mGLPrograms.line.beforeDraw(mGLBuffLadders.getGLBufferId());
        //mGLPrograms.line.draw(ViewM*mModelMLadders,ProjM,LadderLines[0].vertOffset,LadderLines[0].vertCount);
        mGLPrograms.line.afterDraw();
    }*/

//make the ladder line
/*{
    const float lineH=mWidth*0.015f;
    auto tmp=GLProgramLine::makeHorizontalLine({-mWidth/2.0f,0},mWidth,lineH,settingsOSDStyle.OSD_LINE_FILL_COLOR,settingsOSDStyle.OSD_LINE_OUTLINE_COLOR);
    mGLBuffLadders.uploadGL(tmp);
    LadderLines[0].vertOffset=0;
    LadderLines[0].vertCount=6;
}*/